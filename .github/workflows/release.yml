name: Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

jobs:
  build-sdist:
    runs-on: ubuntu-latest

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Build source distribution
      run: |
        pip install -U setuptools wheel pip
        python setup.py sdist

    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: dist-sdist  
        path: dist/*.tar.*

  build-wheels-matrix:
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - run: pip install cibuildwheel==2.21.3
      - id: set-matrix
        run: |
          MATRIX_INCLUDE=$(
            {
              cibuildwheel --print-build-identifiers --platform linux --arch x86_64,aarch64 | grep cp |  jq -nRc '{"only": inputs, "os": "ubuntu-latest"}' \
              && cibuildwheel --print-build-identifiers --platform macos --arch x86_64,arm64 | grep cp |  jq -nRc '{"only": inputs, "os": "macos-latest"}' \
              && cibuildwheel --print-build-identifiers --platform windows --arch x86,AMD64 | grep cp |  jq -nRc '{"only": inputs, "os": "windows-latest"}'
            } | jq -sc
          )
          echo "include=$MATRIX_INCLUDE" >> $GITHUB_OUTPUT

  build-wheels:
    needs: build-wheels-matrix
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.only }}

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.build-wheels-matrix.outputs.include) }}

    defaults:
      run:
        shell: bash

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: true

    - name: Set up QEMU
      if: runner.os == 'Linux'
      uses: docker/setup-qemu-action@v2

    - uses: pypa/cibuildwheel@7940a4c0e76eb2030e473a5f864f291f63ee879b 
      with:
        only: ${{ matrix.only }}
      env:
        CIBW_BUILD_VERBOSITY: 1

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-wheels-${{ matrix.only }}
        path: wheelhouse/*.whl

  publish:
    needs: [build-sdist, build-wheels]
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/async_gaussdb
    permissions:
      id-token: write
      attestations: write
      contents: write
      deployments: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 5
        submodules: false

    - name: Download sdist artifact
      uses: actions/download-artifact@v4
      with:
        name: dist-sdist
        path: dist/

    - name: Download wheel artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-wheels-${{ matrix.only }}
        path: dist/

    - name: Extract Release Version
      id: relver
      run: |
        set -e
        echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Publish Github Release
      uses: elprans/gh-action-create-release@master
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN  }}
      with:
        tag_name: v${{ steps.relver.outputs.version }}
        release_name: v${{ steps.relver.outputs.version }}
        target: ${{ github.ref }}  
        body: "Release v${{ steps.relver.outputs.version }}"

    - run: |
        ls -al dist/  

    - name: Upload to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        attestations: true